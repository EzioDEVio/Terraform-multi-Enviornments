name: Multi-Environment CI/CD Workflow

#on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: 'choice'
        options:
          - prod
          - staging
          - dev

jobs:
  build-scan-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Build Docker image
      - name: Build Docker image with environment-specific tag
        id: build
        run: |
          ENVIRONMENT=""
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
            ENVIRONMENT="dev"
          elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
            ENVIRONMENT="staging"
          elif [[ $GITHUB_REF_NAME == 'main' ]]; then
            ENVIRONMENT="prod"
          fi
          IMAGE_TAG="latest"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/app:${ENVIRONMENT}-${IMAGE_TAG}"
          docker build -t $IMAGE_NAME $ENVIRONMENT/ # Assumes Dockerfile in each directory
          echo "::set-output name=image_name::$IMAGE_NAME"
      
      # Push Docker image to registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ${{ steps.build.outputs.image_name }}

      # Scan Docker image with Trivy
      - name: Scan the Docker image with Trivy
        run: |
          trivy image --severity CRITICAL,HIGH --no-progress ${{ steps.build.outputs.image_name }}

      # Setup Python for Checkov
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install Checkov
      - name: Install Checkov
        run: pip install checkov

      # Run Checkov against Terraform files
      - name: Run Checkov
        run: checkov -d ${{ steps.set-dir.outputs.TF_DIR }}

      # Set Terraform Directory
      - name: Set Terraform Directory
        id: set-dir
        run: |
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
            echo "::set-output name=TF_DIR::Dev"
          elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
            echo "::set-output name=TF_DIR::Staging"
          elif [[ $GITHUB_REF_NAME == 'main' ]]; then
            echo "::set-output name=TF_DIR::Prod"
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            echo "::set-output name=TF_DIR::${{ github.event.inputs.environment }}"
          fi

      # Setup AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      # Setup Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize and apply Terraform
      - name: Terraform Init and Apply
        run: |
          terraform -chdir=${{ steps.set-dir.outputs.TF_DIR }} init
          terraform -chdir=${{ steps.set-dir.outputs.TF_DIR }} apply -auto-approve
