name: Multi-Environment CI/CD Workflow

#on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: 'choice'
        options:
          - prod
          - staging
          - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Assuming GITHUB_TOKEN is used here

      - name: Build and push Docker image with environment-specific tag
        run: |
          IMAGE_TAG=latest
          ENVIRONMENT=""
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
            ENVIRONMENT="dev"
          elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
            ENVIRONMENT="staging"
          elif [[ $GITHUB_REF_NAME == 'main' ]]; then
            ENVIRONMENT="prod"
          fi
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/app:${ENVIRONMENT}-${IMAGE_TAG}"
          docker build -t $IMAGE_NAME $ENVIRONMENT/ # Assuming there's a Dockerfile in each directory
          docker push $IMAGE_NAME

  terraform-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Terraform Directory
        id: set-dir
        run: |
          ENVIRONMENT=""
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
            ENVIRONMENT="Dev"
          elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
            ENVIRONMENT="Staging"
          elif [[ $GITHUB_REF_NAME == 'main' ]]; then
            ENVIRONMENT="Prod"
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          echo "::set-output name=TF_DIR::$ENVIRONMENT"

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init and Apply
        run: |
          TF_DIR=${{ steps.set-dir.outputs.TF_DIR }}
          terraform -chdir=$TF_DIR init
          terraform -chdir=$TF_DIR apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
